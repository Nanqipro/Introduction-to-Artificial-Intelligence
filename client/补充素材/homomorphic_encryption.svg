<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- 定义渐变 -->
    <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4A90E2;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#357ABD;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="greenGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#5CB85C;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#449D44;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#D9534F;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#C9302C;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#9B59B6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#8E44AD;stop-opacity:1" />
    </linearGradient>
    
    <!-- 定义滤镜 -->
    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    
    <!-- 定义锁的形状 -->
    <g id="lock">
      <rect x="0" y="0" width="40" height="30" rx="3" fill="url(#blueGradient)" stroke="#2C5282" stroke-width="2"/>
      <path d="M 10 0 L 10 -8 A 10 10 0 0 1 30 -8 L 30 0" fill="none" stroke="#2C5282" stroke-width="3"/>
      <circle cx="20" cy="15" r="3" fill="#2C5282"/>
    </g>
    
    <!-- 定义开锁的形状 -->
    <g id="unlock">
      <rect x="0" y="0" width="40" height="30" rx="3" fill="url(#greenGradient)" stroke="#449D44" stroke-width="2"/>
      <path d="M 10 0 L 10 -8 A 10 10 0 0 1 20 -8" fill="none" stroke="#449D44" stroke-width="3"/>
      <circle cx="20" cy="15" r="3" fill="#449D44"/>
    </g>
  </defs>
  
  <!-- 背景 -->
  <rect width="800" height="600" fill="#F8F9FA"/>
  
  <!-- 标题 -->
  <text x="400" y="40" text-anchor="middle" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#2C3E50">
    同态加密：在加密数据上直接计算
  </text>
  
  <!-- 步骤1: 原始数据 -->
  <g id="step1">
    <!-- 用户图标 -->
    <circle cx="100" cy="150" r="25" fill="url(#greenGradient)" stroke="#449D44" stroke-width="2"/>
    <text x="100" y="155" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="white">用户</text>
    
    <!-- 原始数据 -->
    <rect x="50" y="200" width="100" height="60" rx="5" fill="#E8F4FD" stroke="#4A90E2" stroke-width="2"/>
    <text x="100" y="225" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#2C3E50">数据</text>
    <text x="100" y="245" text-anchor="middle" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#4A90E2">5 + 3</text>
    
    <!-- 标签 -->
    <text x="100" y="290" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#7F8C8D">
      步骤1: 原始数据
    </text>
  </g>
  
  <!-- 步骤2: 加密过程 -->
  <g id="step2" opacity="0">
    <!-- 加密动画 -->
    <g transform="translate(250, 150)">
      <use href="#lock" x="-20" y="-15" filter="url(#glow)">
        <animate attributeName="opacity" values="1;0.3;1" dur="1s" begin="0s" repeatCount="3"/>
      </use>
    </g>
    
    <!-- 加密后的数据 -->
    <rect x="200" y="200" width="100" height="60" rx="5" fill="#F8E8E8" stroke="#D9534F" stroke-width="2"/>
    <text x="250" y="220" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#2C3E50">加密后</text>
    <text x="250" y="240" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#D9534F">Enc(5)</text>
    <text x="250" y="255" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#D9534F">Enc(3)</text>
    
    <!-- 标签 -->
    <text x="250" y="290" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#7F8C8D">
      步骤2: 加密数据
    </text>
    
    <!-- 加密箭头 -->
    <path d="M 160 230 L 190 230" stroke="#4A90E2" stroke-width="2" marker-end="url(#arrowhead)"/>
  </g>
  
  <!-- 步骤3: 云端计算 -->
  <g id="step3" opacity="0">
    <!-- 云端图标 -->
    <g transform="translate(450, 150)">
      <ellipse cx="0" cy="0" rx="35" ry="20" fill="url(#purpleGradient)" stroke="#8E44AD" stroke-width="2"/>
      <ellipse cx="-20" cy="5" rx="25" ry="15" fill="url(#purpleGradient)" stroke="#8E44AD" stroke-width="2"/>
      <ellipse cx="20" cy="5" rx="25" ry="15" fill="url(#purpleGradient)" stroke="#8E44AD" stroke-width="2"/>
      <text x="0" y="5" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="white">云端</text>
    </g>
    
    <!-- 云端计算过程 -->
    <rect x="400" y="200" width="100" height="60" rx="5" fill="#F4E8F8" stroke="#9B59B6" stroke-width="2"/>
    <text x="450" y="220" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#2C3E50">云端计算</text>
    <text x="450" y="240" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#9B59B6">Enc(5) +</text>
    <text x="450" y="255" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#9B59B6">Enc(3)</text>
    
    <!-- 计算结果 -->
    <rect x="400" y="280" width="100" height="40" rx="5" fill="#E8F8E8" stroke="#5CB85C" stroke-width="2"/>
    <text x="450" y="305" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#5CB85C">Enc(8)</text>
    
    <!-- 标签 -->
    <text x="450" y="350" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#7F8C8D">
      步骤3: 云端计算
    </text>
    
    <!-- 传输箭头 -->
    <path d="M 310 230 L 390 230" stroke="#D9534F" stroke-width="2" marker-end="url(#arrowhead)"/>
  </g>
  
  <!-- 步骤4: 解密结果 -->
  <g id="step4" opacity="0">
    <!-- 用户图标 -->
    <text x="650" y="155" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="#449D44">用户</text>
    
    <!-- 解密过程 -->
    <g transform="translate(650, 150)">
      <use href="#unlock" x="-20" y="-15" filter="url(#glow)">
        <animate attributeName="opacity" values="1;0.3;1" dur="1s" begin="0s" repeatCount="3"/>
      </use>
    </g>
    
    <!-- 最终结果 -->
    <rect x="600" y="200" width="100" height="60" rx="5" fill="#E8F8E8" stroke="#5CB85C" stroke-width="2"/>
    <text x="650" y="225" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#2C3E50">最终结果</text>
    <text x="650" y="250" text-anchor="middle" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#5CB85C">8</text>
    
    <!-- 标签 -->
    <text x="650" y="290" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#7F8C8D">
      步骤4: 解密结果
    </text>
    
    <!-- 返回箭头 -->
    <path d="M 510 300 L 590 230" stroke="#5CB85C" stroke-width="2" marker-end="url(#arrowhead)"/>
  </g>
  
  <!-- 箭头标记 -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
    </marker>
  </defs>
  
  <!-- 说明文字 -->
  <text x="400" y="400" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2C3E50">
    同态加密的神奇之处
  </text>
  
  <text x="400" y="430" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#7F8C8D">
    数据始终保持加密状态，但云端仍能进行计算
  </text>
  
  <text x="400" y="450" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#7F8C8D">
    计算结果解密后 = 直接计算原始数据的结果
  </text>
  
  <!-- 动画控制 -->
  <animateTransform attributeName="transform" type="translate" values="0,0;0,0" dur="0s" repeatCount="1"/>
  
  <!-- 步骤显示控制 -->
  <script type="text/javascript">
    <![CDATA[
      let currentStep = 0;
      const steps = ['step1', 'step2', 'step3', 'step4'];
      
      function showStep(stepIndex) {
        steps.forEach((stepId, index) => {
          const element = document.getElementById(stepId);
          if (element) {
            element.style.opacity = index <= stepIndex ? '1' : '0';
            element.style.transition = 'opacity 0.5s ease-in-out';
          }
        });
      }
      
      // 自动播放动画
      setInterval(() => {
        currentStep = (currentStep + 1) % steps.length;
        showStep(currentStep);
      }, 3000);
      
      // 初始化显示第一步
      showStep(0);
    ]]>
  </script>
</svg>